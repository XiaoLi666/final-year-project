using UnityEngine;
using System.Collections.Generic;

namespace GameLogic {
	public class PathNodeGenerator : MonoBehaviour {
		#region attributes
		static public GENERATION_MODE m_generationMode = GENERATION_MODE.GENERATION_tutorial; // by default is manual
		[SerializeField] private GameObject m_player;
		[SerializeField] private GameObject m_playerModel;
		[SerializeField] private GameObject[] m_pathNodes;
		[SerializeField] private PathNodeGenerator.PATHNODE_TYPE[] m_pathNodeTypes;
		[SerializeField] private GameMap m_map;
		[SerializeField] private Vector3 m_startLocation;
		[SerializeField] private Vector3 m_defaultDirection;
		[SerializeField] private float m_generateDistance;
		[SerializeField] private List<PATHNODE_TYPE> m_randomPathNodeCollection = new List<PATHNODE_TYPE>(); // list of path node types for random generation use
		[SerializeField] private List<Vector2> m_directionCollection = new List<Vector2>(); // collection of four direction during random generation process

		private int m_directionIndex;
		private int m_pathNodeAutoGenerateSum = 0;
		private bool m_isWaypointListReady = false;
		private GameObject m_firstPathNode;
		private Transform[] m_waypointsTransformList;
		private Vector2 m_initDirection = Vector2.zero;
		private List<int> m_randomGenerationCount = new List<int>(); // list of counter corresponding to each random generation path node type
		private List<Transform> m_waypointsList = new List<Transform>();
		private List<GameObject> m_pathNodesList = new List<GameObject>();
		private Stack<Vector2> m_simulation = new Stack<Vector2>();
		private Stack<PATHNODE_TYPE> m_pathNodeTypeStack = new Stack<PATHNODE_TYPE>();
		private Dictionary<PATHNODE_TYPE, int> m_pathNodeRemainingDict = new Dictionary<PATHNODE_TYPE, int>();
		private Dictionary<PATHNODE_TYPE, GameObject> m_pathNodeDict = new Dictionary<PATHNODE_TYPE, GameObject>(); // created by m_pathNodes and m_pathNodeTypes

        public Transform[] WaypointsTransformList {
            get {
                return m_waypointsTransformList;
            }
        }

        public enum PATHNODE_TYPE {
			PATHNODE_end,
			PATHNODE_moveDown,
			PATHNODE_moveLeft,
			PATHNODE_moveRight,
			PATHNODE_moveUp,
			PATHNODE_normal,
			PATHNODE_turnLeft,
			PATHNODE_turnRight,
			PATHNODE_seaweed,
			PATHNODE_speedup,
			PATHNODE_start
		};

		public enum GENERATION_MODE {
			GENERATION_tutorial,
			GENERATION_custom
		}
        #endregion

		#region override methods
		void Start () {
			m_defaultDirection.Normalize ();

			// Invalid match of path node and path node type
			if (m_pathNodes.Length != m_pathNodeTypes.Length) {
				print ("Invalid array size for m_pathNodes and m_pathNodeTypes");
			} else {
				for (int i = 0; i < m_pathNodes.Length; ++i) {
					m_pathNodeDict.Add (m_pathNodeTypes[i], m_pathNodes[i]);
				}
			}

			// Create path
			Create ();

			if (m_pathNodesList.Count > 0) {
				// Render path gizmo
				RenderPathGizmo ();
				// TODO: going to find a proper place for this line of code
				// iTween.MoveTo (m_player, iTween.Hash ("path", m_waypointsTransformList, "speed", 2.0f, "easetype", "linear"));
			}
		}

		void OnDrawGizmos(){
			if (m_isWaypointListReady == true) {
				iTween.DrawPath (m_waypointsTransformList, Color.blue);
			}
		}
        #endregion

        #region custom methods
        // Path generate function
        private List<PathNodeGenerator.PATHNODE_TYPE> Generate() {
			switch (m_generationMode) {
			case GENERATION_MODE.GENERATION_tutorial:
				return m_map.m_pathNodeTypes;
			case GENERATION_MODE.GENERATION_custom: {
                        for (int i = 0; i < DataCollection.GetInstance().MapData.MapConfigList.Count; ++i) {
                        	m_randomGenerationCount.Add(DataCollection.GetInstance().MapData.MapConfigList[i]);
                        }

                        m_randomGenerationCount.Add(1);
						return AutoGeneratedMap();
					}
			}

			return null;
		}

		private void GetRotationAngle(ref float rotation_angle, PATHNODE_TYPE node_type) {
			const float rotation_threshold = 90.0F;
			switch (node_type) {
			case PATHNODE_TYPE.PATHNODE_turnRight:
				rotation_angle += rotation_threshold;
				break;
			case PATHNODE_TYPE.PATHNODE_turnLeft:
				rotation_angle -= rotation_threshold;
				break;
			}
		}
			
		private void RenderPathGizmo() {
			// Collect all the waypoints
			foreach (GameObject path_node in m_pathNodesList) {
				foreach (Transform child in path_node.transform) {
					if (child.tag == "Waypoint") {
						m_waypointsList.Add (child);
					}
				}
			}
			m_waypointsTransformList = m_waypointsList.ToArray();
			m_isWaypointListReady = true;
		}

		// Function to create the map
		private void Create() {
			List<PathNodeGenerator.PATHNODE_TYPE> path_node_list = Generate ();
			GameObject prefab_to_refer = null;
			GameObject previous_prefab = null;
			float rotation_angle = 0.0F;
			Vector3 cur_location = m_startLocation;
			Vector3 current_direction = m_defaultDirection;
			Vector3 rotation_vector = new Vector3 (0.0F, rotation_angle, 0.0F);

			foreach (PATHNODE_TYPE node_type in path_node_list) {
				// Calculate path generation direction
				current_direction = Quaternion.Euler(0.0F, rotation_angle, 0.0F) * m_defaultDirection;

				// Calculate the location for the path node to generate
				cur_location += m_generateDistance * current_direction;

				// Instantiate a new path node
				prefab_to_refer = m_pathNodeDict[node_type];
				prefab_to_refer = Instantiate (prefab_to_refer, cur_location, prefab_to_refer.transform.rotation) as GameObject;

				// Add to pathnode list
				m_pathNodesList.Add(prefab_to_refer);

				// Update orientation of each path node
				rotation_vector.y = rotation_angle;
				prefab_to_refer.transform.Rotate(rotation_vector);

				// Get rotation angle for next path node
				GetRotationAngle (ref rotation_angle, node_type);

				// Pass attributes to PathNode object
				//prefab_to_refer.GetComponent<PathNode>().Player = m_player;
				//prefab_to_refer.GetComponent<PathNode>().Direction = current_direction;

				// make linkedlist inside PathNode class
				//if (previous_prefab != null) {
				//	previous_prefab.GetComponent<PathNode>().NextPathNode = prefab_to_refer;
				//}
				previous_prefab = prefab_to_refer;
			}
			m_firstPathNode = m_pathNodesList[0];
		}

		private void InitRandomGeneration() {
			for (int i = 0; i < m_randomPathNodeCollection.Count; i++) {
				m_pathNodeRemainingDict.Add (m_randomPathNodeCollection[i], m_randomGenerationCount[i]);
				if (m_randomPathNodeCollection[i] != PATHNODE_TYPE.PATHNODE_normal) { // ignore the count for normal path node
					m_pathNodeAutoGenerateSum += m_randomGenerationCount[i];
				}
			}

			SetGenerateDirection ();
			m_simulation.Push (new Vector2(0,0));
		}

		private PATHNODE_TYPE GetRandomPathNodeType() {
			int random_number;
			PATHNODE_TYPE random_type;
			do {
				random_number = Random.Range (0, m_randomPathNodeCollection.Count);
				random_type = m_randomPathNodeCollection [random_number];
				if (random_type == PATHNODE_TYPE.PATHNODE_normal) break;
			} while (m_pathNodeRemainingDict[random_type] <= 0);
		
			--m_pathNodeRemainingDict[random_type];

			if (random_type != PATHNODE_TYPE.PATHNODE_normal) {
				--m_pathNodeAutoGenerateSum;
			}

			return random_type;
		}

		private void SetGenerateDirection() {
			m_directionIndex = Random.Range (0, m_directionCollection.Count);
			m_initDirection = m_directionCollection[m_directionIndex];
		}

		private void UpdateGenerateDirection(PATHNODE_TYPE type) {
			switch (type) {
			case PATHNODE_TYPE.PATHNODE_turnLeft:
				--m_directionIndex;
				if (m_directionIndex < 0) {
					m_directionIndex = m_directionCollection.Count - 1;
				}
				break;
			case PATHNODE_TYPE.PATHNODE_turnRight:
				++m_directionIndex;
				if (m_directionIndex >= m_directionCollection.Count) {
					m_directionIndex = 0;
				}
				break;
			}
			m_initDirection = m_directionCollection[m_directionIndex];
		}

		private Vector2 GetPredictCoord() {
			return m_simulation.Peek() + m_initDirection;
		}

		// Update the 2D simulation
		private void UpdateSimulation() {
			Vector2 new_coordinate = GetPredictCoord();
			m_simulation.Push (new_coordinate);
		}

		// Check whether the conflict happens
		private bool ConflictHappen() {
			Vector2 new_coordinate = GetPredictCoord();
			foreach (Vector2 v in m_simulation) {
				if (v.Equals(new_coordinate))
					return true;
			}
			return false;
		}

		// When collision detection happens during the random generation, need to reverse back to some situation and generate again
		private void ReverseBack(Stack<PATHNODE_TYPE> stack) {
			while (true) {
				PATHNODE_TYPE type = stack.Pop ();
				m_simulation.Pop ();
				if (m_pathNodeRemainingDict.ContainsKey (type)) {
					m_pathNodeRemainingDict [type]++;
				}

				++m_pathNodeAutoGenerateSum;

				switch (type) {
				case PATHNODE_TYPE.PATHNODE_start:
					--m_pathNodeAutoGenerateSum;
					stack.Push (type);
					return;
				case PATHNODE_TYPE.PATHNODE_normal:
					--m_pathNodeAutoGenerateSum;
					break;
				case PATHNODE_TYPE.PATHNODE_turnLeft:
					UpdateGenerateDirection (PATHNODE_TYPE.PATHNODE_turnRight);
					return;
				case PATHNODE_TYPE.PATHNODE_turnRight:
					UpdateGenerateDirection (PATHNODE_TYPE.PATHNODE_turnLeft);
					return;
				}
			}
		}

		// Given a path node type, insert it into path stack by doing some checking
		private void InsertPathNodeStack(PATHNODE_TYPE type) {
			bool conflict_happen = ConflictHappen ();
			if (conflict_happen == true) {
				ReverseBack (m_pathNodeTypeStack);
			}

			m_pathNodeTypeStack.Push (type);
			UpdateSimulation ();
			UpdateGenerateDirection (type);
		}

		// strategies to take to deal with specific random generated path node
		private void HandleRandomizedPathNode(PATHNODE_TYPE type) {
			switch (type) {
			case PATHNODE_TYPE.PATHNODE_speedup:
				InsertPathNodeStack (PATHNODE_TYPE.PATHNODE_normal);
				InsertPathNodeStack (PATHNODE_TYPE.PATHNODE_normal);
				break;
			}
		}

		private List<PATHNODE_TYPE> AutoGeneratedMap() {

			Debug.Log(Time.realtimeSinceStartup);

			InitRandomGeneration ();
			m_pathNodeTypeStack.Push (PATHNODE_TYPE.PATHNODE_start);

			while (m_pathNodeAutoGenerateSum > 0) {
				PATHNODE_TYPE type_to_add = GetRandomPathNodeType();
				InsertPathNodeStack (type_to_add);
				HandleRandomizedPathNode (type_to_add);

				// Deal with the last path node
				if (m_pathNodeAutoGenerateSum <= 0) {
					bool conflict_happen = ConflictHappen ();
					if (conflict_happen == true) {
						ReverseBack (m_pathNodeTypeStack);
					} else {
						m_pathNodeTypeStack.Push (PATHNODE_TYPE.PATHNODE_end);
					}
				}
			}

			// Reverse the path node stack and convert it to a List and return it
			Stack<PATHNODE_TYPE> path_node_type_stack_reverse = new Stack<PATHNODE_TYPE> (m_pathNodeTypeStack.Count);
			foreach (PATHNODE_TYPE type in m_pathNodeTypeStack) {
				path_node_type_stack_reverse.Push (type);
			}
			List<PATHNODE_TYPE> path_node_type_list = new List<PATHNODE_TYPE> ();
			foreach (PATHNODE_TYPE type in path_node_type_stack_reverse) {
				path_node_type_list.Add (type);
			}

			Debug.Log(Time.realtimeSinceStartup);
			return path_node_type_list;
		}
		#endregion
	}
}